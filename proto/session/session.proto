syntax = "proto3";

package protocol;
option go_package = "projekt/core/lib/session";

enum ChannelType {
  CHANNEL_TYPE_INVALID = 0;
  CHANNEL_TYPE_TRANSFER = 1; // transfer data (files, images, text, ...) between devices
  // ...
}

message Open {
  // opens a channel with a specific ID.
  // the ID must not be used by any other open channel.
  // the ID should be generated by incrementing the last opened channel ID.
  // the initiator should start at 1 and increment by 2 each time (odd).
  // the responder should start at 2 and increment by 2 each time (even).
  // this way initiator and responder will never collide.
  // the creator of the channel can also be derived from its ID.
  // channel ID 0 is reserved for future use.
  uint64 channel_id = 1;
  // the channel type determines the protocol that is spoken over this channel.
  // each protocol gets its own protobuf package and set of messages.
  // each protocol must define message types in an enumeration.
  ChannelType channel_type = 2;
}

message Accept {
  // the channel has been accepted by the peer
  // who is now listening for messages.
  // only now is it guaranteed that messages on this channel will reach the other device.
  uint64 channel_id = 1;
}

// TODO enable denial of a channel if e.g. the protocol is unknown.

message Close {
  // closes a channel with a specific ID.
  // messages on this channel are discarded after it is closed.
  // a device should be careful with closing channels of the other peer.
  // usually the creator of the channel should be the one who closes it.
  uint64 channel_id = 1;
}

message Data {
  // contains data that is to be transmitted on a specific channel.
  // will be discarded by the receiver if that channel has been closed.
  uint64 channel_id = 1;
  // Holds the value of the message type of the respective protocol (depends on channel_type).
  // It is an integer instead of a specific enum, since protocols use different enums.
  int32 message_type = 2;
  // the payload contains the encoded protobuf message of this channel's protocol.
  bytes payload = 3;
}

message Message {
  // using oneof here spares us from using another message_id field here
  // and specifying the message type in the program code
  // which could be another source of potential bugs.
  oneof content {
    Open open = 1;
    Accept accept = 2;
    Close close = 3;
    Data data = 4;
  }
}
